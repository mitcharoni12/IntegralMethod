Double_t MGDecayByActivity(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];

	Double_t f = (MG0 * lambdaMG * (TMath::Exp(-lambdaMG * timeVar)));

	return f;
}

Double_t MGDecayByActivityIntegral(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];

	Double_t f = MG0 * (1.0 - TMath::Exp(-lambdaMG * timeVar));

}

Double_t ALDecayByActivity(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];
	Double_t AL0 = par[2];
	Double_t lambdaAL = par[3];

	Double_t f = (AL0 * lambdaAL * (TMath::Exp(-lambdaAL * timeVar)));

	f += (MG0 * lambdaAL * lambdaMG * ((TMath::Exp(-lambdaMG * timeVar))/(1*(lambdaAL-lambdaMG))));
	f += (MG0 * lambdaAL * lambdaMG * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaMG-lambdaAL))));

	return f;
}

Double_t ALDecayByActivityIntegral(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];
	Double_t AL0 = par[2];
	Double_t lambdaAL = par[3];

	Double_t f = AL0 * (1.0 - TMath::Exp(-lambdaAL * timeVar));

	f += (MG0 * lambdaAL * lambdaMG * ((TMath::Exp(-lambdaMG * timeVar))/(1*(lambdaAL-lambdaMG))));
	f += (MG0 * lambdaAL * lambdaMG * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaMG-lambdaAL))));

}

Double_t SIDecayByActivity(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];
	Double_t AL0 = par[2];
	Double_t lambdaAL = par[3];
	Double_t SI0 = par[4];
	Double_t lambdaSI = par[5];

	Double_t f = (SI0 * lambdaSI * (TMath::Exp(-lambdaSI * timeVar)));

	f += (MG0 * lambdaSI * lambdaMG * lambdaAL * ((TMath::Exp(-lambdaMG * timeVar))/(1*(lambdaAL-lambdaMG)*(lambdaSI-lambdaMG))));
	f += (MG0 * lambdaSI * lambdaMG * lambdaAL * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaMG-lambdaAL)*(lambdaSI-lambdaAL))));
	f += (MG0 * lambdaSI * lambdaMG * lambdaAL * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaMG-lambdaSI)*(lambdaAL-lambdaSI))));

	f += (AL0 * lambdaSI * lambdaAL * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaSI-lambdaAL))));
	f += (AL0 * lambdaSI * lambdaAL * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaAL-lambdaSI))));

	return f;
}

Double_t SIDecayByActivityIntegral(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];
	Double_t AL0 = par[2];
	Double_t lambdaAL = par[3];
	Double_t SI0 = par[4];
	Double_t lambdaSI = par[5];

	Double_t f = SI0 * (1.0 - TMath::Exp(-lambdaSI * timeVar));

	f += (MG0 * lambdaSI * lambdaMG * lambdaAL * ((TMath::Exp(-lambdaMG * timeVar))/(1*(lambdaAL-lambdaMG)*(lambdaSI-lambdaMG))));
	f += (MG0 * lambdaSI * lambdaMG * lambdaAL * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaMG-lambdaAL)*(lambdaSI-lambdaAL))));
	f += (MG0 * lambdaSI * lambdaMG * lambdaAL * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaMG-lambdaSI)*(lambdaAL-lambdaSI))));

	f += (AL0 * lambdaSI * lambdaAL * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaSI-lambdaAL))));
	f += (AL0 * lambdaSI * lambdaAL * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaAL-lambdaSI))));

}

Double_t PDecayByActivity(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];
	Double_t AL0 = par[2];
	Double_t lambdaAL = par[3];
	Double_t SI0 = par[4];
	Double_t lambdaSI = par[5];
	Double_t P0 = par[6];
	Double_t lambdaP = par[7];

	Double_t f = (P0 * lambdaP * (TMath::Exp(-lambdaP * timeVar)));

	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaMG * timeVar))/(1*(lambdaAL-lambdaMG)*(lambdaSI-lambdaMG)*(lambdaP-lambdaMG))));
	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaMG-lambdaAL)*(lambdaSI-lambdaAL)*(lambdaP-lambdaAL))));
	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaMG-lambdaSI)*(lambdaAL-lambdaSI)*(lambdaP-lambdaSI))));
	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaP * timeVar))/(1*(lambdaMG-lambdaP)*(lambdaAL-lambdaP)*(lambdaSI-lambdaP))));

	f += (AL0 * lambdaP * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaSI-lambdaAL)*(lambdaP-lambdaAL))));
	f += (AL0 * lambdaP * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaAL-lambdaSI)*(lambdaP-lambdaSI))));
	f += (AL0 * lambdaP * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaP * timeVar))/(1*(lambdaAL-lambdaP)*(lambdaSI-lambdaP))));

	f += (SI0 * lambdaP * lambdaSI * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaP-lambdaSI))));
	f += (SI0 * lambdaP * lambdaSI * ((TMath::Exp(-lambdaP * timeVar))/(1*(lambdaSI-lambdaP))));

	return f;
}

Double_t PDecayByActivityIntegral(Double_t *x, Double_t *par)
{
	Float_t timeVar = x[0];
	Double_t MG0 = par[0];
	Double_t lambdaMG = par[1];
	Double_t AL0 = par[2];
	Double_t lambdaAL = par[3];
	Double_t SI0 = par[4];
	Double_t lambdaSI = par[5];
	Double_t P0 = par[6];
	Double_t lambdaP = par[7];

	Double_t f = P0 * (1.0 - TMath::Exp(-lambdaP * timeVar));

	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaMG * timeVar))/(1*(lambdaAL-lambdaMG)*(lambdaSI-lambdaMG)*(lambdaP-lambdaMG))));
	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaMG-lambdaAL)*(lambdaSI-lambdaAL)*(lambdaP-lambdaAL))));
	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaMG-lambdaSI)*(lambdaAL-lambdaSI)*(lambdaP-lambdaSI))));
	f += (MG0 * lambdaP * lambdaMG * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaP * timeVar))/(1*(lambdaMG-lambdaP)*(lambdaAL-lambdaP)*(lambdaSI-lambdaP))));

	f += (AL0 * lambdaP * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaAL * timeVar))/(1*(lambdaSI-lambdaAL)*(lambdaP-lambdaAL))));
	f += (AL0 * lambdaP * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaAL-lambdaSI)*(lambdaP-lambdaSI))));
	f += (AL0 * lambdaP * lambdaAL * lambdaSI * ((TMath::Exp(-lambdaP * timeVar))/(1*(lambdaAL-lambdaP)*(lambdaSI-lambdaP))));

	f += (SI0 * lambdaP * lambdaSI * ((TMath::Exp(-lambdaSI * timeVar))/(1*(lambdaP-lambdaSI))));
	f += (SI0 * lambdaP * lambdaSI * ((TMath::Exp(-lambdaP * timeVar))/(1*(lambdaSI-lambdaP))));

}

